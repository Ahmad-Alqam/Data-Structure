class Nodes {
	int element;
	Nodes next;
	
	public Nodes(int element) {
		this.element = element;
		this.next = null;
	}

}

public class Linked_List {
	private Nodes head;
	private Nodes tail;
	private int size;
	
	public Linked_List() {
		head = null;
		tail = null;
		size = 0;
	}
	
	public void insertBeginning(int element) { //O(1)
		Nodes new_node = new Nodes(element);
		if(head == null) {
			head = tail = new_node;
		} else {
			new_node.next = head;
			head = new_node;
		}
		size++;
	}
	
	public void insertEnd(int element) { //O(1)
		Nodes new_node = new Nodes(element);
		if(head == null) {
			head = tail = new_node;
		} else {
			tail.next = new_node;
			tail = new_node;
		}
		size++;
	}
	
	public void deleteBeginning() { //O(1)
		if(head == null) {
			return;
		} 
		head = head.next;
		size--;
		if(head == null) {
			tail = null;
		}
	}
	
	public void deleteEnd() { //O(n)
		if(head == null) {
			return;
		}
		if(head == tail) {
			head = tail = null;
		} else {
			Nodes temp = head;
			while(temp.next != tail) {
				temp = temp.next;
			}
			temp.next = null;
			tail = temp;
		}
		size--;
	}
	
	public int access(int index) { //O(n)
		if(index < 0 || index >= size) {
			return -1;
		}
		Nodes temp = head;
		for(int i = 0 ; i < index ; i++) {
			temp = temp.next;
		}
		return temp.element;
	}
	
	public boolean search(int element) { //O(n)
		Nodes temp = head;
		while(temp != null) {
			if(temp.element == element) {
				return true;
			}
			temp = temp.next;
		}
		return false;
	}
	
	public int size() { //O(1)
		return size;
	}
	
	public void print() { //O(n)
		Nodes temp = head;
		while(temp != null) {
			System.out.print(temp.element + "-->");
			temp = temp.next;
		}
		System.out.println("NULL");
	}
}
